{"version":3,"sources":["components/TodoHeader.js","components/Todo.js","components/TodoList.js","components/TodoFooter.js","view/App.js","serviceWorker.js","models/todo.js","store.js","index.js"],"names":["TodoHeader","handleKeyUp","e","keyCode","value","target","_this","props","addTodo","react_default","a","createElement","className","onKeyUp","this","type","placeholder","React","Component","connect","_ref","todo","done","Todo","handleDelete","index","deleteTodo","handleChange","_this$props","changeIsDone","_this$props2","_this$props2$todo","checked","onChange","concat","onClick","_ref$todo","payload","TodoNav","_this$props$todo","isDoing","map","components_Todo","key","TodoList","TodoList_TodoNav","Object","assign","state","TodoFooter","isCheckedAll","handleChangeCheckedAll","console","log","setState","checkedAll","clearIsDone","isAllChecked","App","components_TodoHeader","components_TodoList","components_TodoFooter","Boolean","window","location","hostname","match","delay","time","Promise","resolve","setTimeout","data","localStorage","getItem","localTodo","JSON","parse","error","saveTodoToLocal","setItem","stringify","reducers","local","toConsumableArray","splice","_ref2","_ref3","item","filter","effects","dispatch","addTodoAsync","_addTodoAsync","asyncToGenerator","regenerator_default","mark","_callee","rootState","wrap","_context","prev","next","stop","_x","_x2","apply","arguments","store","init","models","ReactDOM","render","es","view_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2ac151a.chunk.js","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\n// import styles from '../App.css'\n\nclass TodoHeader extends React.Component {\n  handleKeyUp = e => {\n    if (e.keyCode === 13) {\n      const value = e.target.value\n      if (!value) return\n      e.target.value = ''\n      this.props.addTodo(value)\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"todo__header\">\n        <div>To Do List</div>\n        <input\n          className=\"todo__header_input\"\n          onKeyUp={this.handleKeyUp}\n          type=\"text\"\n          placeholder=\"Come On Add Todo\"\n        />\n      </div>\n    )\n  }\n}\n\nconst mapDispatch = ({ todo: { addTodo } }) => ({\n  addTodo: value =>\n    addTodo({\n      value,\n      done: false\n    })\n})\n\nexport default connect(\n  null,\n  mapDispatch\n)(TodoHeader)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nclass Todo extends Component {\n  handleDelete = () => {\n    const { index } = this.props\n    this.props.deleteTodo({ index })\n  }\n\n  handleChange = () => {\n    const {\n      index,\n      todo: { done }\n    } = this.props\n    this.props.changeIsDone({ index, done: !done })\n  }\n\n  render() {\n    const {\n      todo: { done, value },\n      index\n    } = this.props\n    return (\n      <li className=\"todo__item\">\n        <input\n          className=\"todo__checkbox\"\n          type=\"checkbox\"\n          checked={done}\n          onChange={this.handleChange}\n        />\n        <span className=\"todo__item_value\">\n          {`${index + 1}„ÄÅ`}\n          {value}\n        </span>\n        <span className=\"delete\" onClick={this.handleDelete}>\n          Delete\n        </span>\n      </li>\n    )\n  }\n}\n\nconst mapDispatch = ({ todo: { deleteTodo, changeIsDone } }) => ({\n  deleteTodo: payload => deleteTodo(payload),\n  changeIsDone: payload => changeIsDone(payload)\n})\n\nexport default connect(\n  null,\n  mapDispatch\n)(Todo)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport Todo from './Todo'\n\nclass TodoNav extends React.Component {\n  render() {\n    const { todo = [], isDoing } = this.props\n    return (\n      <ul className=\"todo__list\">\n        <li className=\"todo__list_nav\">{isDoing ? 'isDoing' : 'isDone'}</li>\n        {isDoing\n          ? todo.map(\n              (todo, index) =>\n                !todo.done && <Todo index={index} todo={todo} key={index} />\n            )\n          : todo.map(\n              (todo, index) =>\n                todo.done && <Todo index={index} todo={todo} key={index} />\n            )}\n      </ul>\n    )\n  }\n}\n\nclass TodoList extends React.Component {\n  render() {\n    return (\n      <div>\n        <TodoNav isDoing={true} {...this.props} />\n        <TodoNav isDoing={false} {...this.props} />\n      </div>\n    )\n  }\n}\n\nTodoList.propTypes = {\n  todo: PropTypes.array.isRequired\n}\nconst mapState = state => ({\n  todo: state.todo\n})\n\nexport default connect(mapState)(TodoList)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nclass TodoFooter extends Component {\n  state = { isCheckedAll: false }\n\n  handleChangeCheckedAll = () => {\n    const isCheckedAll = !this.state.isCheckedAll\n    console.log('handleChangeCheckedAll', isCheckedAll)\n    this.setState({ isCheckedAll })\n    this.props.checkedAll({ isCheckedAll })\n  }\n\n  clearIsDone = () => {\n    this.props.clearIsDone()\n  }\n\n  render() {\n    return (\n      <div className=\"todo__footer\">\n        <div className=\"todo__list_nav\">Operation</div>\n        <div className=\"todo__item\">\n          <input\n            className=\"todo__checkbox\"\n            type=\"checkbox\"\n            checked={this.props.isAllChecked}\n            onChange={this.handleChangeCheckedAll}\n          />\n          <span className=\"todo__item_value\">Select All</span>\n          <span onClick={this.clearIsDone} className=\"todo__delete\">\n            Select Delete\n          </span>\n        </div>\n        <p className=\"todo__log\">Copyright ¬© 2017 by Sailor</p>\n      </div>\n    )\n  }\n}\n\nconst mapDispatch = ({ todo: { checkedAll, clearIsDone } }) => ({\n  checkedAll: payload => checkedAll(payload),\n  clearIsDone: () => clearIsDone()\n})\n\nexport default connect(\n  null,\n  mapDispatch\n)(TodoFooter)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport TodoHeader from '../components/TodoHeader'\nimport TodoList from '../components/TodoList'\nimport TodoFooter from '../components/TodoFooter'\n\nimport '../style/todo.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <TodoHeader />\n        <TodoList />\n        <TodoFooter />\n      </div>\n    )\n  }\n}\n\nconst mapState = state => ({\n  todo: state.todo\n})\n\nexport default connect(mapState)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// function to create a one second delay\nconst delay = time => new Promise(resolve => setTimeout(() => resolve(), time))\n\nconst data = localStorage.getItem('todo') || []\nlet localTodo = []\n\ntry {\n  localTodo = JSON.parse(data)\n} catch (error) {\n  localTodo = []\n}\n\nfunction saveTodoToLocal(todo) {\n  localStorage.setItem('todo', JSON.stringify(todo))\n}\n\nconst todo = {\n  state: localTodo,\n  reducers: {\n    addTodo(state, payload) {\n      const local = [...state, payload]\n      saveTodoToLocal(local)\n      return local\n    },\n    deleteTodo(state, { index }) {\n      state.splice(index - 1, 1)\n      saveTodoToLocal([...state])\n      return [...state]\n    },\n    changeIsDone(state, { index, done }) {\n      state[index].done = done\n      saveTodoToLocal([...state])\n      return [...state]\n    },\n    checkedAll(state, { isCheckedAll }) {\n      state.map(item => (item.done = isCheckedAll))\n      saveTodoToLocal([...state])\n      return [...state]\n    },\n    clearIsDone(state, payload) {\n      const local = state.filter(item => !item.done)\n      saveTodoToLocal([...local])\n      return [...local]\n    }\n  },\n  effects: dispatch => ({\n    async addTodoAsync(payload, rootState) {\n      await delay(1000)\n      dispatch.todo.addTodo(payload)\n    }\n  })\n}\n\nexport { todo }\n","import { init } from '@rematch/core'\nimport * as models from './models/todo'\n\nconst store = init({ models })\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './style/index.css'\nimport App from './view/App'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\n\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}